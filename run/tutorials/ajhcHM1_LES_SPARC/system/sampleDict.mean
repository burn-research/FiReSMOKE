/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    location        system;
    object          sampleDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//
// Note:
// other formats such as obj, stl, etc can also be written (by proxy)
// but without any values!
surfaceFormat vtk;

// interpolationScheme. choice of
//      cell          : use cell-centre value only; constant over cells (default)
//      cellPoint     : use cell-centre and vertex values
//      cellPointFace : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPoint;

// Fields to sample.
fields
(
CH4Mean
CO2Mean
COMean
H2Mean
H2OMean
N2Mean
O2Mean
TMean
        
);


// Set sampling definition: choice of
//      lineUniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, inbetween two face intersections
//      midPointAndFace     combination of face and midPoint
//
//      curve               specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      lineUniform, face, midPoint, midPointAndFace : start and end coordinate
//      lineUniform: extra number of sampling points
//      curve, cloud: list of coordinates
type sets;
libs ("libsampling.so");

sets
(
    Centerline
    {
        type        lineUniform;
        axis        distance;

        start       (0.030 0 0);
        end         (0.21 0 0);
        nPoints     181;
    }
  
    Radial_4
    {
        type        lineUniform;
        axis        distance;

        start       (0.004 0 0);
        end         (0.004 0 0.127 );
        nPoints     68;
    }
    Radial_30
       {
        type        lineUniform;
        axis        distance;

        start       (0.030 0 0 );
        end         (0.030 0 0.127 );
        nPoints     68;
    }
    Radial_60
     {
        type        lineUniform;
        axis        distance;

        start       (0.060 0 0 );
        end         (0.060 0 0.127 );
        nPoints     68;
    }
    Radial_120
      {
        type        lineUniform;
        axis        distance;

        start       (0.120 0 0.0001 );
        end         (0.120 0 0.0899 );
        nPoints     69;
    }
    Radial_200
        {
        type        lineUniform;
        axis        distance;

        start       (0.200 0 0 );
        end         (0.200 0 0.127 );
        nPoints     87;
    }
    
);


// Surface sampling definition: choice of
//      plane : values on plane defined by point, normal.
//      patch : values on patch.
//
// 1] patches are not triangulated by default
// 2] planes are always triangulated
// 3] iso-surfaces are always triangulated
surfaces ();

// *********************************************************************** //
